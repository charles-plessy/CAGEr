% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CumulativeDistributionFunctions.R
\name{coverage-functions}
\alias{coverage-functions}
\alias{.getCAGEsignalCoverage}
\alias{.getCumsumChr2}
\alias{.getCumsum}
\title{Private functions behind \code{cumulativeCTSSdistribution}}
\usage{
.getCAGEsignalCoverage(ctss.chr, clusters)

.getCumsumChr2(clusters, ctss, chrom, str)

.getCumsum(ctss, clusters, useMulticore = FALSE, nrCores = NULL)
}
\arguments{
\item{ctss.chr}{A `CTSS.chr`` object (guaranteed to have only one chromosome).}

\item{clusters}{GRanges as per \code{\link[=tagClustersGR]{tagClustersGR()}}.}

\item{ctss}{GRanges as per \code{CTSScoordinatesGR}, with the score of one sample.}

\item{chrom}{a chromosome name}

\item{str}{a strand name}

\item{useMulticore, nrCores}{See clusterCTSS.}
}
\value{
\code{.getCumsum} returns a list of \code{Rle} vectors (IRanges package) containing cumulative
sum for each cluster (length of list is equal to number of clusters and names of the list
components corespond to the name of the corresponding cluster) v.
}
\description{
\code{.getCumsum} calculates cumulative sums of tpm along the clusters.
}
\details{
`.getCAGEsignalCoverage`` does...
Note that strand is not taken into account.

\code{.getCumsumChr2}
}
\examples{
library(GenomicRanges)
library(IRanges)
ctss <- CTSS( seqnames = "chr1"
            , IRanges(c(1,3,4,12,14,25,28,31,35), w=1)
            , strand = "+")
score(ctss) <- 1
ctss.chr <- as(ctss, "CTSS.chr")
clusters <- GRanges( seqnames = Rle("chr1")
                   , ranges = IRanges(c(1,12,25,31,32), c(4,14,28,31,33))
                   , strand = "+")
chrom <- "chr1"
str <- "+"
CAGEr:::.getCAGEsignalCoverage(ctss.chr, clusters)
CAGEr:::.getCumsumChr2(clusters, ctss, chrom, str)

ctss      <- CTSSnormalizedTpmGR(exampleCAGEexp, "Zf.30p.dome")
ctss      <- ctss[ctss$filteredCTSSidx]
clusters  <- tagClustersGR(exampleCAGEexp, "Zf.30p.dome")
clusters.cumsum <- CAGEr:::.getCumsum(ctss, head(clusters))
decode(clusters.cumsum[[3]])
ctss[queryHits(findOverlaps(ctss, clusters[3]))]
clusters[3]
}
